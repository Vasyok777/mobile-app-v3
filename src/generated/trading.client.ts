// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "trading.proto" (package "trading", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TradingGameService } from "./trading";
import type { PriceUpdate } from "./trading";
import type { StreamPriceRequest } from "./trading";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetPriceHistoryResponse } from "./trading";
import type { GetPriceHistoryRequest } from "./trading";
import type { GetBetResultResponse } from "./trading";
import type { GetBetResultRequest } from "./trading";
import type { PlaceBetResponse } from "./trading";
import type { PlaceBetRequest } from "./trading";
import type { GetCurrentPriceResponse } from "./trading";
import type { GetCurrentPriceRequest } from "./trading";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StartSessionResponse } from "./trading";
import type { StartSessionRequest } from "./trading";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service trading.TradingGameService
 */
export interface ITradingGameServiceClient {
    /**
     * @generated from protobuf rpc: StartSession(trading.StartSessionRequest) returns (trading.StartSessionResponse);
     */
    startSession(input: StartSessionRequest, options?: RpcOptions): UnaryCall<StartSessionRequest, StartSessionResponse>;
    /**
     * @generated from protobuf rpc: GetCurrentPrice(trading.GetCurrentPriceRequest) returns (trading.GetCurrentPriceResponse);
     */
    getCurrentPrice(input: GetCurrentPriceRequest, options?: RpcOptions): UnaryCall<GetCurrentPriceRequest, GetCurrentPriceResponse>;
    /**
     * @generated from protobuf rpc: PlaceBet(trading.PlaceBetRequest) returns (trading.PlaceBetResponse);
     */
    placeBet(input: PlaceBetRequest, options?: RpcOptions): UnaryCall<PlaceBetRequest, PlaceBetResponse>;
    /**
     * @generated from protobuf rpc: GetBetResult(trading.GetBetResultRequest) returns (trading.GetBetResultResponse);
     */
    getBetResult(input: GetBetResultRequest, options?: RpcOptions): UnaryCall<GetBetResultRequest, GetBetResultResponse>;
    /**
     * @generated from protobuf rpc: GetPriceHistory(trading.GetPriceHistoryRequest) returns (trading.GetPriceHistoryResponse);
     */
    getPriceHistory(input: GetPriceHistoryRequest, options?: RpcOptions): UnaryCall<GetPriceHistoryRequest, GetPriceHistoryResponse>;
    /**
     * @generated from protobuf rpc: StreamPrice(trading.StreamPriceRequest) returns (stream trading.PriceUpdate);
     */
    streamPrice(input: StreamPriceRequest, options?: RpcOptions): ServerStreamingCall<StreamPriceRequest, PriceUpdate>;
}
/**
 * @generated from protobuf service trading.TradingGameService
 */
export class TradingGameServiceClient implements ITradingGameServiceClient, ServiceInfo {
    typeName = TradingGameService.typeName;
    methods = TradingGameService.methods;
    options = TradingGameService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StartSession(trading.StartSessionRequest) returns (trading.StartSessionResponse);
     */
    startSession(input: StartSessionRequest, options?: RpcOptions): UnaryCall<StartSessionRequest, StartSessionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartSessionRequest, StartSessionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCurrentPrice(trading.GetCurrentPriceRequest) returns (trading.GetCurrentPriceResponse);
     */
    getCurrentPrice(input: GetCurrentPriceRequest, options?: RpcOptions): UnaryCall<GetCurrentPriceRequest, GetCurrentPriceResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCurrentPriceRequest, GetCurrentPriceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PlaceBet(trading.PlaceBetRequest) returns (trading.PlaceBetResponse);
     */
    placeBet(input: PlaceBetRequest, options?: RpcOptions): UnaryCall<PlaceBetRequest, PlaceBetResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlaceBetRequest, PlaceBetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBetResult(trading.GetBetResultRequest) returns (trading.GetBetResultResponse);
     */
    getBetResult(input: GetBetResultRequest, options?: RpcOptions): UnaryCall<GetBetResultRequest, GetBetResultResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBetResultRequest, GetBetResultResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPriceHistory(trading.GetPriceHistoryRequest) returns (trading.GetPriceHistoryResponse);
     */
    getPriceHistory(input: GetPriceHistoryRequest, options?: RpcOptions): UnaryCall<GetPriceHistoryRequest, GetPriceHistoryResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPriceHistoryRequest, GetPriceHistoryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamPrice(trading.StreamPriceRequest) returns (stream trading.PriceUpdate);
     */
    streamPrice(input: StreamPriceRequest, options?: RpcOptions): ServerStreamingCall<StreamPriceRequest, PriceUpdate> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamPriceRequest, PriceUpdate>("serverStreaming", this._transport, method, opt, input);
    }
}
