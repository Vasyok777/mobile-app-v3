// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "user.proto" (package "user", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./user";
import type { UpdateUserNicknameRequest } from "./user";
import type { DeleteUserAvatarResponse } from "./user";
import type { DeleteUserAvatarRequest } from "./user";
import type { GetUserAvatarResponse } from "./user";
import type { GetUserAvatarRequest } from "./user";
import type { SetUserAvatarResponse } from "./user";
import type { SetUserAvatarRequest } from "./user";
import type { CheckAndUpdateTasksResponse } from "./user";
import type { CheckAndUpdateTasksRequest } from "./user";
import type { CompleteTaskResponse } from "./user";
import type { CompleteTaskRequest } from "./user";
import type { GetUserTasksResponse } from "./user";
import type { GetUserTasksRequest } from "./user";
import type { UpdateUserPointsRequest } from "./user";
import type { UserReferralsResponse } from "./user";
import type { GetUserReferralsRequest } from "./user";
import type { UserResponse } from "./user";
import type { UserRequest } from "./user";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateUserResponse } from "./user";
import type { CreateUserRequest } from "./user";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service user.UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: CreateUser(user.CreateUserRequest) returns (user.CreateUserResponse);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, CreateUserResponse>;
    /**
     * @generated from protobuf rpc: GetUser(user.UserRequest) returns (user.UserResponse);
     */
    getUser(input: UserRequest, options?: RpcOptions): UnaryCall<UserRequest, UserResponse>;
    /**
     * @generated from protobuf rpc: GetUserReferrals(user.GetUserReferralsRequest) returns (user.UserReferralsResponse);
     */
    getUserReferrals(input: GetUserReferralsRequest, options?: RpcOptions): UnaryCall<GetUserReferralsRequest, UserReferralsResponse>;
    /**
     * @generated from protobuf rpc: UpdateUserPoints(user.UpdateUserPointsRequest) returns (user.UserResponse);
     */
    updateUserPoints(input: UpdateUserPointsRequest, options?: RpcOptions): UnaryCall<UpdateUserPointsRequest, UserResponse>;
    /**
     * @generated from protobuf rpc: GetUserTasks(user.GetUserTasksRequest) returns (user.GetUserTasksResponse);
     */
    getUserTasks(input: GetUserTasksRequest, options?: RpcOptions): UnaryCall<GetUserTasksRequest, GetUserTasksResponse>;
    /**
     * @generated from protobuf rpc: CompleteTask(user.CompleteTaskRequest) returns (user.CompleteTaskResponse);
     */
    completeTask(input: CompleteTaskRequest, options?: RpcOptions): UnaryCall<CompleteTaskRequest, CompleteTaskResponse>;
    /**
     * @generated from protobuf rpc: CheckAndUpdateTasks(user.CheckAndUpdateTasksRequest) returns (user.CheckAndUpdateTasksResponse);
     */
    checkAndUpdateTasks(input: CheckAndUpdateTasksRequest, options?: RpcOptions): UnaryCall<CheckAndUpdateTasksRequest, CheckAndUpdateTasksResponse>;
    /**
     * @generated from protobuf rpc: SetUserAvatar(user.SetUserAvatarRequest) returns (user.SetUserAvatarResponse);
     */
    setUserAvatar(input: SetUserAvatarRequest, options?: RpcOptions): UnaryCall<SetUserAvatarRequest, SetUserAvatarResponse>;
    /**
     * @generated from protobuf rpc: GetUserAvatar(user.GetUserAvatarRequest) returns (user.GetUserAvatarResponse);
     */
    getUserAvatar(input: GetUserAvatarRequest, options?: RpcOptions): UnaryCall<GetUserAvatarRequest, GetUserAvatarResponse>;
    /**
     * @generated from protobuf rpc: DeleteUserAvatar(user.DeleteUserAvatarRequest) returns (user.DeleteUserAvatarResponse);
     */
    deleteUserAvatar(input: DeleteUserAvatarRequest, options?: RpcOptions): UnaryCall<DeleteUserAvatarRequest, DeleteUserAvatarResponse>;
    /**
     * @generated from protobuf rpc: UpdateUserNickname(user.UpdateUserNicknameRequest) returns (user.UserResponse);
     */
    updateUserNickname(input: UpdateUserNicknameRequest, options?: RpcOptions): UnaryCall<UpdateUserNicknameRequest, UserResponse>;
}
/**
 * @generated from protobuf service user.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateUser(user.CreateUserRequest) returns (user.CreateUserResponse);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, CreateUserResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserRequest, CreateUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUser(user.UserRequest) returns (user.UserResponse);
     */
    getUser(input: UserRequest, options?: RpcOptions): UnaryCall<UserRequest, UserResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserRequest, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserReferrals(user.GetUserReferralsRequest) returns (user.UserReferralsResponse);
     */
    getUserReferrals(input: GetUserReferralsRequest, options?: RpcOptions): UnaryCall<GetUserReferralsRequest, UserReferralsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserReferralsRequest, UserReferralsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUserPoints(user.UpdateUserPointsRequest) returns (user.UserResponse);
     */
    updateUserPoints(input: UpdateUserPointsRequest, options?: RpcOptions): UnaryCall<UpdateUserPointsRequest, UserResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserPointsRequest, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserTasks(user.GetUserTasksRequest) returns (user.GetUserTasksResponse);
     */
    getUserTasks(input: GetUserTasksRequest, options?: RpcOptions): UnaryCall<GetUserTasksRequest, GetUserTasksResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserTasksRequest, GetUserTasksResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CompleteTask(user.CompleteTaskRequest) returns (user.CompleteTaskResponse);
     */
    completeTask(input: CompleteTaskRequest, options?: RpcOptions): UnaryCall<CompleteTaskRequest, CompleteTaskResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<CompleteTaskRequest, CompleteTaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CheckAndUpdateTasks(user.CheckAndUpdateTasksRequest) returns (user.CheckAndUpdateTasksResponse);
     */
    checkAndUpdateTasks(input: CheckAndUpdateTasksRequest, options?: RpcOptions): UnaryCall<CheckAndUpdateTasksRequest, CheckAndUpdateTasksResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckAndUpdateTasksRequest, CheckAndUpdateTasksResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetUserAvatar(user.SetUserAvatarRequest) returns (user.SetUserAvatarResponse);
     */
    setUserAvatar(input: SetUserAvatarRequest, options?: RpcOptions): UnaryCall<SetUserAvatarRequest, SetUserAvatarResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetUserAvatarRequest, SetUserAvatarResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserAvatar(user.GetUserAvatarRequest) returns (user.GetUserAvatarResponse);
     */
    getUserAvatar(input: GetUserAvatarRequest, options?: RpcOptions): UnaryCall<GetUserAvatarRequest, GetUserAvatarResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserAvatarRequest, GetUserAvatarResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteUserAvatar(user.DeleteUserAvatarRequest) returns (user.DeleteUserAvatarResponse);
     */
    deleteUserAvatar(input: DeleteUserAvatarRequest, options?: RpcOptions): UnaryCall<DeleteUserAvatarRequest, DeleteUserAvatarResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteUserAvatarRequest, DeleteUserAvatarResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUserNickname(user.UpdateUserNicknameRequest) returns (user.UserResponse);
     */
    updateUserNickname(input: UpdateUserNicknameRequest, options?: RpcOptions): UnaryCall<UpdateUserNicknameRequest, UserResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserNicknameRequest, UserResponse>("unary", this._transport, method, opt, input);
    }
}
